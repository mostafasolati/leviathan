// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package leviathan

import (
	"github.com/mostafasolati/leviathan/auth"
	"github.com/mostafasolati/leviathan/config"
	"github.com/mostafasolati/leviathan/contracts"
	"github.com/mostafasolati/leviathan/logger"
	"github.com/mostafasolati/leviathan/notification"
	"github.com/mostafasolati/leviathan/server"
	"github.com/mostafasolati/leviathan/user"
)

// Injectors from main.go:

func Init() contracts.ILeviathan {
	iConfigService := config.NewConfigService()
	iLogger := logger.NewLogger(iConfigService)
	iServerContainer := services.NewEchoServerContainer(iConfigService, iLogger)
	iUserService := user.NewUserService()
	iNotificationService := notification.NewKavenegar(iConfigService)
	iAuth := auth.NewAuthService(iConfigService, iLogger, iUserService, iNotificationService)
	iLeviathan := NewLeviathan(iConfigService, iLogger, iServerContainer, iUserService, iAuth)
	return iLeviathan
}

// main.go:

type leviathan struct {
	config          contracts.IConfigService
	logger          contracts.ILogger
	serverContainer contracts.IServerContainer
	user            contracts.IUserService
	auth            contracts.IAuth
}

func NewLeviathan(config2 contracts.IConfigService, logger2 contracts.ILogger,

	serverContainer contracts.IServerContainer,
	userService contracts.IUserService, auth2 contracts.IAuth,

) contracts.ILeviathan {
	return &leviathan{
		config: config2,
		logger: logger2,
		user:   userService,
		auth:   auth2,
	}
}

func (s *leviathan) Auth() contracts.IAuth {
	return s.auth
}

func (s *leviathan) User() contracts.IUserService {
	return s.user
}

func (s *leviathan) Logger() contracts.ILogger {
	return s.logger
}

func (s *leviathan) Config() contracts.IConfigService {
	return s.config
}

func (s *leviathan) Server() contracts.IServerContainer {
	if s.serverContainer == nil {
		s.serverContainer = services.NewEchoServerContainer(s.config, s.logger)
	}
	return s.serverContainer
}
